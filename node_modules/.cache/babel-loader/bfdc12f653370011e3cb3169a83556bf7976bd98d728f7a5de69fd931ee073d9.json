{"ast":null,"code":"export default {\n  name: \"SortPage\",\n  data() {\n    return {\n      movies: [],\n      apiKey: \"b9dfda1d995db256a3b3ae948d044866\",\n      baseUrl: \"https://api.themoviedb.org/3\"\n    };\n  },\n  created() {\n    this.fetchMovies();\n  },\n  methods: {\n    fetchMovies() {\n      fetch(`${this.baseUrl}/movie/top_rated?api_key=${this.apiKey}&language=en-US&page=1`).then(response => response.json()).then(data => {\n        this.movies = data.results;\n        this.sortMovies();\n      }).catch(error => console.error(error));\n    },\n    getImageUrl(posterPath) {\n      if (!posterPath) {\n        return \"https://via.placeholder.com/500x750?text=Poster+not+available\";\n      }\n      return `https://image.tmdb.org/t/p/w500${posterPath}`;\n    },\n    sortMovies() {\n      this.movies.sort((a, b) => b.vote_average - a.vote_average);\n    },\n    showDetails(id) {\n      // make a request to get movie details using the movie id\n      fetch(`${this.baseUrl}/movie/${id}?api_key=${this.apiKey}&language=en-US`).then(response => response.json()).then(data => {\n        // display the movie details using an alert or a modal\n        alert(`Title: ${data.title}\\nRelease Date: ${data.release_date}\\nOverview: ${data.overview}`);\n      }).catch(error => console.error(error));\n    },\n    moreInfo(movieID) {\n      this.$emit(\"selected\", movieID);\n    }\n  },\n  computed: {\n    sortedMovies() {\n      return this.movies;\n    }\n  }\n};","map":{"version":3,"names":["name","data","movies","apiKey","baseUrl","created","fetchMovies","methods","fetch","then","response","json","results","sortMovies","catch","error","console","getImageUrl","posterPath","sort","a","b","vote_average","showDetails","id","alert","title","release_date","overview","moreInfo","movieID","$emit","computed","sortedMovies"],"sources":["C:\\Users\\User\\Desktop\\WebDevelopmentGroupProject-master\\src\\components\\SortPage.vue"],"sourcesContent":["<template>\r\n  <section id=\"Review\">\r\n    <section class=\"hero is-dark\">\r\n      <div class=\"hero-body\">\r\n        <div class=\"container\">\r\n          <h1 class=\"title\">Top 20 Rated Movies</h1>\r\n          <div class=\"columns is-multiline\">\r\n            <div\r\n              v-for=\"movie in sortedMovies\"\r\n              :key=\"movie.id\"\r\n              class=\"column is-one-fifth\"\r\n            >\r\n              <div class=\"card\">\r\n                <div class=\"card-image\" @click=\"moreInfo(movie.id)\">\r\n                  <figure class=\"image is-2by3\">\r\n                    <img\r\n                      :src=\"getImageUrl(movie.poster_path)\"\r\n                      :alt=\"movie.title\"\r\n                    />\r\n                    <div class=\"rating\">{{ movie.vote_average }}</div>\r\n                  </figure>\r\n                </div>\r\n                <div class=\"card-content\">\r\n                  <div class=\"media-content\">\r\n                    <p class=\"title is-6\">{{ movie.title }}</p>\r\n                    <p class=\"subtitle is-7\">{{ movie.release_date }}</p>\r\n                  </div>\r\n                  <div class=\"content\">\r\n                    {{ movie.overview }}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </section>\r\n  </section>\r\n</template>\r\n<script>\r\nexport default {\r\n  name: \"SortPage\",\r\n  data() {\r\n    return {\r\n      movies: [],\r\n      apiKey: \"b9dfda1d995db256a3b3ae948d044866\",\r\n      baseUrl: \"https://api.themoviedb.org/3\",\r\n    };\r\n  },\r\n  created() {\r\n    this.fetchMovies();\r\n  },\r\n  methods: {\r\n    fetchMovies() {\r\n      fetch(\r\n        `${this.baseUrl}/movie/top_rated?api_key=${this.apiKey}&language=en-US&page=1`\r\n      )\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n          this.movies = data.results;\r\n          this.sortMovies();\r\n        })\r\n        .catch((error) => console.error(error));\r\n    },\r\n    getImageUrl(posterPath) {\r\n      if (!posterPath) {\r\n        return \"https://via.placeholder.com/500x750?text=Poster+not+available\";\r\n      }\r\n      return `https://image.tmdb.org/t/p/w500${posterPath}`;\r\n    },\r\n    sortMovies() {\r\n      this.movies.sort((a, b) => b.vote_average - a.vote_average);\r\n    },\r\n    showDetails(id) {\r\n      // make a request to get movie details using the movie id\r\n      fetch(`${this.baseUrl}/movie/${id}?api_key=${this.apiKey}&language=en-US`)\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n          // display the movie details using an alert or a modal\r\n          alert(\r\n            `Title: ${data.title}\\nRelease Date: ${data.release_date}\\nOverview: ${data.overview}`\r\n          );\r\n        })\r\n        .catch((error) => console.error(error));\r\n    },\r\n    moreInfo(movieID){\r\n        this.$emit(\"selected\", movieID);\r\n    },\r\n  },\r\n  computed: {\r\n    sortedMovies() {\r\n      return this.movies;\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.rating {\r\n  position: absolute;\r\n  top: 10px;\r\n  left: 10px;\r\n  background-color: #fff;\r\n  color: #000;\r\n  font-size: 1.5rem;\r\n  font-weight: bold;\r\n  padding: 5px 10px;\r\n  border-radius: 5px;\r\n}\r\n\r\n.card {\r\n  position: relative;\r\n  overflow: hidden;\r\n  margin-bottom: 1rem;\r\n  box-shadow: 0 2px 3px rgba(10, 10, 10, 0.1);\r\n}\r\n\r\n.card-image {\r\n  position: relative;\r\n  display: block;\r\n}\r\n\r\n.card-image img {\r\n  display: block;\r\n  width: 100%;\r\n  height: auto;\r\n  transition: transform 0.2s ease-out;\r\n}\r\n\r\n.card-image:hover img {\r\n  transform: scale(1.05);\r\n}\r\n\r\n.card-content {\r\n  padding: 1rem;\r\n}\r\n\r\n.card-content .media-content {\r\n  margin-bottom: 0.5rem;\r\n}\r\n\r\n.card-content .title {\r\n  font-size: 1.2rem;\r\n  font-weight: bold;\r\n}\r\n\r\n.card-content .subtitle {\r\n  font-size: 1rem;\r\n  color: #666;\r\n}\r\n\r\n.card-content .content {\r\n  margin-top: 0.5rem;\r\n  font-size: 0.9rem;\r\n  line-height: 1.4rem;\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n  max-height: 4.2rem;\r\n}\r\n\r\n.card-content .content:hover {\r\n  max-height: none;\r\n}\r\n</style>\r\n\r\n"],"mappings":"AAwCA,eAAe;EACbA,IAAI,EAAE,UAAU;EAChBC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,MAAM,EAAE,EAAE;MACVC,MAAM,EAAE,kCAAkC;MAC1CC,OAAO,EAAE;IACX,CAAC;EACH,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,WAAW,EAAE;EACpB,CAAC;EACDC,OAAO,EAAE;IACPD,WAAWA,CAAA,EAAG;MACZE,KAAK,CACF,GAAE,IAAI,CAACJ,OAAQ,4BAA2B,IAAI,CAACD,MAAO,wBAAsB,CAC/E,CACGM,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,EAAE,EAClCF,IAAI,CAAER,IAAI,IAAK;QACd,IAAI,CAACC,MAAK,GAAID,IAAI,CAACW,OAAO;QAC1B,IAAI,CAACC,UAAU,EAAE;MACnB,CAAC,EACAC,KAAK,CAAEC,KAAK,IAAKC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC,CAAC;IAC3C,CAAC;IACDE,WAAWA,CAACC,UAAU,EAAE;MACtB,IAAI,CAACA,UAAU,EAAE;QACf,OAAO,+DAA+D;MACxE;MACA,OAAQ,kCAAiCA,UAAW,EAAC;IACvD,CAAC;IACDL,UAAUA,CAAA,EAAG;MACX,IAAI,CAACX,MAAM,CAACiB,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,CAACC,YAAW,GAAIF,CAAC,CAACE,YAAY,CAAC;IAC7D,CAAC;IACDC,WAAWA,CAACC,EAAE,EAAE;MACd;MACAhB,KAAK,CAAE,GAAE,IAAI,CAACJ,OAAQ,UAASoB,EAAG,YAAW,IAAI,CAACrB,MAAO,iBAAgB,EACtEM,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,EAAE,EAClCF,IAAI,CAAER,IAAI,IAAK;QACd;QACAwB,KAAK,CACF,UAASxB,IAAI,CAACyB,KAAM,mBAAkBzB,IAAI,CAAC0B,YAAa,eAAc1B,IAAI,CAAC2B,QAAS,GACtF;MACH,CAAC,EACAd,KAAK,CAAEC,KAAK,IAAKC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC,CAAC;IAC3C,CAAC;IACDc,QAAQA,CAACC,OAAO,EAAC;MACb,IAAI,CAACC,KAAK,CAAC,UAAU,EAAED,OAAO,CAAC;IACnC;EACF,CAAC;EACDE,QAAQ,EAAE;IACRC,YAAYA,CAAA,EAAG;MACb,OAAO,IAAI,CAAC/B,MAAM;IACpB;EACF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}